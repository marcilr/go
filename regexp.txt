regexp.txt
Created Thu Aug 11 14:26:47 AKDT 2016
Copyright (C) 2016 by Raymond E. Marcil <marcilr@gmail.com>


Package regexp
import "regexp"

Package regexp implements regular expression search.

The syntax of the regular expressions accepted is the same general syntax used
by Perl, Python, and other languages. More precisely, it is the syntax
accepted by RE2 and described at https://golang.org/s/re2syntax, except for
\C.  For an overview of the syntax, run

    go doc regexp/syntax

The regexp implementation provided by this package is guaranteed to run in
time linear in the size of the input.  (This is a property not guaranteed by
most open source implementations of regular expressions.)  For more
information about this property, see

    http://swtch.com/~rsc/regexp/regexp1.html

or any book about automata theory.

All characters are UTF-8-encoded code points.

There are 16 methods of Regexp that match a regular expression and identify
the matched text.  Their names are matched by this regular expression:

    Find(All)?(String)?(Submatch)?(Index)?

If 'All' is present, the routine matches successive non-overlapping matches of
the entire expression.  Empty matches abutting a preceding match are ignored.
The return value is a slicen; if n >= 0, the function returns at most n
matches/submatches.n-'All' routine.  These routines take an extra integer
argument, n; if n >= 0, the function returns at most n matches/submatches.

If 'String' is present, the argument is a string; otherwise it is a slice of
bytes; return values are adjusted as appropriate.

If 'Submatch' is present, the return value is a slice identifying the
successive submatches of the expression.  Submatches are matches of
parenthesized subexpressions (also known as capturing groups) within the
regular expression, numbered from left to right in order of opening
parenthesis.  Submatch 0 is the match of the entire expression, submatch 1 the
match of the first parenthesized subexpression, and so on.

If 'Index' is present, matches and submatches are identified by byte index
pairs within the input string: result[2*n:2*n+1] identifies the indexes of the
nth submatch.  The pair for n==0 identifies the match of the entire expression.
If 'Index' is not present, the match is identified by the text of the
match/submatch.  If an index is negative, it means that subexpression did not
match any string in the input.

There is also a subset of the methods that can be applied to text read from a
RuneReader:

    MatchReader, FindReaderIndex, FindReaderSubmatchIndex

This set may grow.  Note that regular expression matches may need to examine
text beyond the text returned by a match, so the methods that match text from
a RuneReader may read arbitrarily far into the input before returning.

(There are a few other methods that do not match this pattern.)




Links
=====
Package regexp
import "regexp"
The Go Programming Language
https://golang.org/pkg/regexp/
