queries.txt
Created Tue Oct  4 08:57:41 AKDT 2016
Copyright (C) 2016 by Raymond E. Marcil <marcilr@gmail.com>


Queries


Function        Description
--------------------------------------------------
db.Query()      Execute query

db.QueryRow()   Single-Row Queries
                If a query returns at most one row

rows.Scan()     Scan results
 


db.Exec()
=========
func (*DB) Exec
func (db *DB) Exec(query string, args ...interface{}) (Result, error)

Exec executes a query without returning any rows.  The args are for any
placeholder parameters in the query.
--golang.org/pkg/database/sql/


db.Query()
==========
func (*DB) Query
func (db *DB) Query(query string, args ...interface{}) (*Rows, error)

Query executes a query that returns rows, typically a SELECT.  The args are for any
placeholder parameters in the query.
--golang.org/pkg/database/sql/


// Execute the query
rows, err := db.Query("SELECT * FROM table")

--example1/example1.go


db.QueryRow
===========
func (*DB) QueryRow Â¶
func (db *DB) QueryRow(query string, args ...interface{}) *Row

QueryRow executes a query that is expected to return at most one row.
QueryRow always returns a non-nil value. Errors are deferred until Row's
Scan method is called.
--golang.org/pkg/database/sql/


Single-Row Queries
If a query returns at most one row, you can use a shortcut around
some of the lengthy boilerplate code:
  var name string
  err = db.QueryRow("select name from users where id = ?", 1).Scan(&name)
  if err != nil {
      log.Fatal(err)
  }
  fmt.Println(name)

--go-database-sql.org/retrieving.html


var str string
q := "SELECT count(*) FROM events"
err = db.QueryRow(q).Scan(&str)
if err != nil {
    log.Fatal(err)
}
log.Println(str)

--stackoverflow.com/questions/15698479/


rows.Scan()
===========
Scan results



Links
=====
How to connect to mysql with go?
http://stackoverflow.com/questions/15698479/how-to-connect-to-mysql-with-go

Package sql
import "database/sql"
https://golang.org/pkg/database/sql/

Single-Row Queries
Fetching Data from the Database            <===
Very useful page
http://go-database-sql.org/retrieving.html
